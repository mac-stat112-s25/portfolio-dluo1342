---
title: "Bivariate Viz"
number-sections: false
---

Use this file for practice with the **bivariate viz** in-class activity.  Refer to the class website for details.

```{r}
# Load data
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")

# Check it out
head(elections)
```

# Exercise 0: Review
**Part a:**
- My guess: the republican candidate won about 60% of counties in 2020.
```{r}
# Plot of the Winner variable
library(ggplot2)
ggplot(elections, aes(x = winner_20)) + 
  geom_bar() +
  labs(x = "Winning Party", y = "# of Counties")
```
**Part b:**
```{r}
ggplot(elections, aes(x = repub_pct_20)) +
  geom_histogram() +
  labs (x = "Republican Support %", y = "# of Counties")
```
- Follow up question: does the % of republican support correspond proportionally with how the county voted?

# Exercise 1:
```{r}
ggplot(elections, aes(x = repub_pct_16, y = repub_pct_20)) +
         geom_point()
```

# Exercise 2:
Run each chunk below and address comments.
```{r}
# Set up the plotting frame
# How does this differ than the frame for our histogram of repub_pct_20 alone?
# It uses different variables for the x and y axes.
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16))
```
```{r}
# Add a layer of points for each county
# Take note of the geom!
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_point()
```
```{r}
# Change the shape of the points
# What happens if you change the shape to another number?
# Each number corresponds to a different shape
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_point(shape = 1)
```
```{r}
# YOU TRY: Modify the code to make the points "orange"
# NOTE: Try to anticipate if "color" or "fill" will be useful here. Then try both.
# Only "color" works here
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_point(color = "orange")
```
```{r}
# Add a layer that represents each county by the state it's in
# Take note of the geom and the info it needs to run!
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_text(aes(label = state_abbr))
```

# Exercise 3:
- The relationship is strong.
- The direction of the relationship is positive. 
- There is some deviation in the middle of the graph, mostly it seems from counties in Texas. I'm not too familiar with the political climate around this time or in this location, but changes in policy might have something to do with it.

# Exercise 4:
```{r}
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_point() +
  geom_smooth()
```
**Part a:**
```{r}
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_smooth()
```
**Part b:**
```{r}
ggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +
  geom_point() +
  geom_smooth(method = "lm")
```
# Exercise 5:
```{r}
# Scatterplot of repub_pct_20 vs median_rent
ggplot(elections, aes(x = median_rent, y = repub_pct_20)) +
  geom_point()
```
```{r}
# Scatterplot of repub_pct_20 vs median_age
ggplot(elections, aes(x = median_age, y = repub_pct_20)) +
  geom_point()
```
- It seems that `median_rent` has a more linear relationship to `repub_pct_20` than `median_age`.
- `median_rent` has a negative relationship with `repub_pct_20`, while `median_age` has a slightly positive relationship.

# Exercise 6:
```{r}
ggplot(elections, aes(y = repub_pct_20, x = historical)) +
  geom_point()
```
- This can help answer whether historical political trends tend to reflect current ones, and whether they generally stay the same.
- It isn't helpful to see trends or patterns.

# Exercise 7:
```{r}
# Side-by-side violin plots
ggplot(elections, aes(y = repub_pct_20, x = historical)) +
  geom_violin()
```
```{r}
# Side-by-side boxplots (defined below)
ggplot(elections, aes(y = repub_pct_20, x = historical)) +
  geom_boxplot()
```
- Generally speaking, republican support is lower in blue states and higher in red states, which is to be expected.

# Exercise 8
```{r}
ggplot(elections, aes(x = repub_pct_20, fill = historical)) +
  geom_density()
```
# Exercise 9
```{r}
# Name two "bad" things about this plot
# The density plots are stacked, which can be confusing to read. Also, the fill colors don't match up with the words.
ggplot(elections, aes(x = repub_pct_20, fill = historical)) +
  geom_density()
```
```{r}
# What does scale_fill_manual do?
# It lets the fill colors be set manually.
ggplot(elections, aes(x = repub_pct_20, fill = historical)) +
  geom_density() +
  scale_fill_manual(values = c("blue", "purple", "red"))
```
```{r}
# What does alpha = 0.5 do?
# Play around with different values of alpha, between 0 and 1
# alpha = fill opacity
ggplot(elections, aes(x = repub_pct_20, fill = historical)) +
  geom_density(alpha = 0.4) +
  scale_fill_manual(values = c("blue", "purple", "red"))
```
```{r}
# What does facet_wrap do?!
# It seperates each density plot into its own section, rather than overlapping them.
ggplot(elections, aes(x = repub_pct_20, fill = historical)) +
  geom_density() +
  scale_fill_manual(values = c("blue", "purple", "red")) +
  facet_wrap(~ historical)
```
```{r}
# Let's try a similar grouping strategy with a histogram instead of density plot.
# Why is this terrible?
# While this may be useful for visualizing overall support, it makes it very difficult to see the individual groups and compare between them.
ggplot(elections, aes(x = repub_pct_20, fill = historical)) +
  geom_histogram(color = "white") +
  scale_fill_manual(values = c("blue", "purple", "red"))
```
# Exercise 10
- Visually, I like violins the most because they look cool! 
- Density plots are better for visualising extremes and comparing, but boxplots are better for seeing averages and outliers.

# Exercise 11
```{r}
# Plot 1: adjust this to recreate the top plot
ggplot(elections, aes(x = historical, fill = winner_20)) +
  geom_bar()
```
```{r}
# Plot 2: adjust this to recreate the bottom plot
ggplot(elections, aes(x = winner_20)) +
  geom_bar() +
  facet_wrap(~ historical)
```
# Exercise 12
```{r}
# A stacked bar plot
# How are the "historical" and "winner_20" variables mapped to the plot, i.e. what roles do they play?
# "historical" determines the categories of the bars, "winner_20" determines how they're colored: in this case, stacked.
ggplot(elections, aes(x = historical, fill = winner_20)) +
  geom_bar()
```
```{r}
# A faceted bar plot
ggplot(elections, aes(x = winner_20)) +
  geom_bar() +
  facet_wrap(~ historical)
```
```{r}
# A side-by-side bar plot
# Note the new argument to geom_bar
ggplot(elections, aes(x = historical, fill = winner_20)) +
  geom_bar(position = "dodge")
```
```{r}
# A proportional bar plot
# Note the new argument to geom_bar
ggplot(elections, aes(x = historical, fill = winner_20)) +
  geom_bar(position = "fill")
```
- It is easier to compare the relative weight of the sections.
- I like proportional bar plots because of the above mentioned ease of comparison and because it looks nice!

# Exercise 13
```{r}
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv")
```

```{r}
# How do 3pm temperatures (temp3pm) differ by location?
# temp3pm = quantitative, location = qualitative
ggplot(weather, aes(x = location, y = temp3pm)) +
  geom_violin()
```
```{r}
# How might we predict the 3pm temperature (temp3pm) by the 9am temperature (temp9am)?
ggplot(weather, aes(x = temp9am, y = temp3pm)) +
  geom_point() +
  geom_smooth(method = lm)
```
```{r}
# How do the number of rainy days (raintoday) differ by location?
ggplot(weather, aes(x = location, fill = raintoday)) +
  geom_bar(position = "fill")
```

