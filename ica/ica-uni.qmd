---
title: "Univariate Viz"
number-sections: false
---

Use this file for practice with the **univariate viz** in-class activity.  Refer to the class website for details.

```{r}
#| eval: true

# Import data
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
```

# Exercise 1
```{r}
head(hikes)
```
a. the `rating` variable might capture how many hiking trails correspond to each difficulty rating.
b. the `elevation` variable might capture the range of elevations.

# Exercise 2
```{r}
# Use the ggplot function
# ggplot(hikes, aes(x = rating))
```
Take note of the error message.
```{r}
# Load the package
library(tidyverse)
```
# Exercise 3
```{r}
# Set up the plotting frame of a bar chart
ggplot(hikes, aes(x = rating))
```
- This created the basic frame for a chart, seperated into the rating categories.
- The first argument of the `ggplot()` function declares the data set it should be drawing from.
- `x = rating` makes the `rating` variable the x-axis.
- `aes` stands for "aesthetics".

# Exercise 4
Try the following code chunks one by one, and take note of how the code and the corresponding chart changes.
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# adding a "geom_bar()" function to the code creates a bar plot
ggplot(hikes, aes(x = rating)) +
  geom_bar()
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# adding the "labs()" function creates labels, in this case on the x and y axes.
ggplot(hikes, aes(x = rating)) +
  geom_bar() +
  labs(x = "Rating", y = "Number of hikes")
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# adding the "fill" argument to "geom_bar" colors the bars
ggplot(hikes, aes(x = rating)) +
  geom_bar(fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# "color" sets the color of the bar's outline, while "fill" sets the color for the enclosed space
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# changed the theme of the graph, in this case, to minimal
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue")  +
  labs(x = "Rating", y = "Number of hikes") +
  theme_minimal()
```
# Exercise 5
Part a:

- `+` allows additional functions/arguments to be added.
- `geom` stands for "Geometry"
- `labs` stands for "Labels"
- `color` sets the outline color, while `fill` sets the color of the enclosed space.

Part b:

- Observed variables: rating
- Variability between categories: some categories are more common than others.
- In this case, the moderate rating category is much more common than the other two difficulties. 

Part c:

- It would be nice if the ratings were arranged from easy to hard, regardless of how common the category is. 

# Exercise 6:
```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_bar()
```
- There's too many options/categories of elevation to effectively show distribution.

# Exercise 7
Part a:

- 6 hikes have an elevation between 4500 and 4700 feet.
- 2 hikes have an elevation of at least 5100 feet.

Part b:

- The center of the data points is around 4500 feet. 
- The range of elevation go from about 3500 feet to about 5600 feet. They are generally fairly evenly distributed.
- The distribution is symmetric. 
- There are no particularly significant outliers.

# Exercise 8
```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_histogram()
```
# Exercise 9
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# 'geom_histogram()' creates histogram layer on the plotting frame
ggplot(hikes, aes(x = elevation)) +
  geom_histogram()
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# 'color' changes the Outline color to white
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") 
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# 'fill' changes the fill color to blue
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", fill = "blue") 
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# 'labs' add labels to the graph
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# 'binwidth' changes the width of 'bins'/categories
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 1000) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# another change to bin width
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 5) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```
```{r}
# COMMENT on the change in the code and the corresponding change in the plot
# another change to bin width
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 200) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```
# Exercise 10

- `geom_histogram()` added the histogram layer
- `color` affects the outline color, while `fill` affects the fill color
- `color = "white"` creates an outline around each bar, making the division between bars more visible
- `binwidth` changes how wide the bars are
- If `binwidth` is too big, the histogram loses meaning as too many data points fall within the same category
- If `binwidth` is too small, the histogram becomes similar to a bar graph, and is ineffectual for displaying a large number of varying datapoints because it is too specific.

# Exercise 11
```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density()
```
- `geom_density(color = "blue")` will change the color of the density line to blue
```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density(color = "blue")
```

- `geom_density(fill = "orange")` will change the color of the area under the density line
```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density(fill = "orange")
```
# Exercise 12

- Histograms make it easier to visualize the exact *number* of cases in each category range, while density plots make it easier to visualize the *percentage* of cases in each category range.

# Exercise 13

- Indenting code makes it more legible, and shows which functions are subordinate to another. Similarly, line breaks prevents all the code from clumping on one layer, instead giving each function its own distinct line (and purpose)

