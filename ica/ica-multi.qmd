---
title: "Multivariate Viz"
number-sections: false
---

Use this file for practice with the **multivariate viz** in-class activity.  Refer to the class website for details.

# Review
```{r}
library(tidyverse)

# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |> 
  mutate(date = as.Date(date))  
```
```{r}
# Check out the first 6 rows
head(weather)
```
```{r}
# What are the units of observation?
names(weather)
```
```{r}
# How many data points do we have? 
nrow(weather)
```
```{r}
# What type of variables do we have?
str(weather)
```
# Example 1
```{r}
ggplot(weather, aes(x = temp3pm)) +
  geom_density()
```
# Example 2
Construct 3 plots that answer the following question:
- How do afternoon temperatures (`temp3pm`) differ by `location`?
```{r}
# Plot 1 (no facets & starting from a density plot of temp3pm)
ggplot(weather, aes(x = temp3pm, color = location)) + 
  geom_density(alpha = 0.6)
```
```{r}
# Plot 2 (no facets or densities)
ggplot(weather, aes(y = temp3pm, x = location)) +
  geom_boxplot()
```
```{r}
# Plot 3 (facets)
ggplot(weather, aes(x = temp3pm)) +
  geom_density() +
  facet_wrap(~ location)
```
Reflection:

- Temperatures tend to be highest, and most variable, in Uluru. There, they range from ~10 to ~45 with a typical temp around ~30 degrees.
- Temperatures tend to be lowest in Hobart. There, they range from ~5 to ~45 with a typical temp around ~15 degrees.
- Wollongong temps are in between and are the least variable from day to day.

Note: defining `Fill` and `Color`

- If defined by a **named color**, they are defined outside of `aes()` in quotes
  - Ex.: `geom__(fill = "blue")`
- If defined by a **variable**, they are defined in `aes()`
  - Ex.: `geom__(aes(fill = variable))` or `ggplot (_, aes(fill = variable))`
  
# Example 3
```{r}
# Don't worry about the syntax (we'll learn it soon)
woll <- weather |>
  filter(location == "Wollongong") |> 
  mutate(date = as.Date(date))  
```
```{r}
# How often does it raintoday?
# Fill your geometric layer with the color blue.
ggplot(woll, aes(x = raintoday)) +
  geom_bar(fill = "blue")
```
```{r}
# If it does raintoday, what does this tell us about raintomorrow?
# Use your intuition first
ggplot(woll, aes(x = raintoday))
# ggplot(woll, aes(x = raintoday, fill = raintomorrow)) +
#  geom_bar(position = "fill")
```
```{r}
# Now compare different approaches

# Default: stacked bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar()
```
```{r}
# Side-by-side bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "dodge")
```
```{r}
# Proportional bars
# position = "fill" refers to filling the frame, nothing to do with the color-related fill
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "fill")
```
Reflection:

- There’s often not one “best plot”, but a combination of plots that provide a complete picture:
  - The stacked and side-by-side bars reflect that on most days, it does not rain.
  - The proportional / filled bars lose that information, but make it easier to compare proportions: it’s more likely to rain tomorrow if it also rains today.

# Example 4
Construct a plot that illustrates how 3pm temperatures (`temp3pm`) vary by date in Wollongong. Represent each day on the plot and use a curve/line to help highlight the trends.
```{r}
# THINK: What variable goes on the y-axis?
# For the curve, try adding span = 0.5 to tweak the curvature
ggplot(woll, aes(y = temp3pm, x = date)) +
  geom_point() +
  geom_smooth(span = 0.5)
```


```{r}
# Instead of a curve that captures the general TREND,
# draw a line that illustrates the movement of RAW temperatures from day to day
# NOTE: We haven't learned this geom yet! Guess.
ggplot(woll, aes(y = temp3pm, x = date)) +
  geom_line()
```

# Example 5
Considering all three locations
```{r}
# Plot temp3pm vs temp9am
# Change the code in order to indicate the location to which each data point corresponds
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_point()
```
```{r}
# Change the code in order to indicate the location to which each data point corresponds
# AND identify the days on which it rained / didn't raintoday
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_point() +
  facet_wrap(~ raintoday)
```
# Example 6
```{r}
# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)
ggplot(weather, aes(y = temp3pm, x = date)) + 
  geom_line() + 
  facet_wrap(~ location)
```
# Example 7
```{r}
# Plot the relationship of raintomorrow & raintoday
# Change the code in order to indicate this relationship by location
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "fill") + 
  facet_wrap(~ location)
```
# Exercise 1
```{r}
# Import and check out data
education <- read.csv("https://mac-stat.github.io/data/sat.csv")
head(education)
```
Part a:
```{r}
ggplot(education, aes(x = sat)) +
  geom_density()
```
Part b:

- The range of the average scores go from <800 to >1100. 
- The shape appears to peak at just over 900, with a smaller peak at about 1050.

# Exercise 2
Can the variability in `sat` scores from state to state be partially explained by how much a state spends on education, specifically its per pupil spending (`expend`) and typical teacher `salary`?

Part a:
```{r}
# Construct a plot of sat vs expend
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(x = expend, y = sat)) +
  geom_point() +
  geom_smooth(method = "lm")
```
```{r}
# Construct a plot of sat vs salary
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(x = salary, y = sat)) +
  geom_point() +
  geom_smooth(method = "lm")
```
Part b:

- There is a weak negative relationship between both `expend` vs `sat` and `salary` vs `sat`.
- It is surprising that the relationship is negative; it seems that the less is spent, the higher the average score seems to be.

# Exercise 3
Construct one visualization of the relationship of `sat` with `salary` and `expend`.
```{r}
ggplot(education, aes(x = salary, y = sat, color = expend)) +
  geom_point() +
  geom_smooth(method = "lm")
```
# Exercise 4
```{r}
ggplot(education, aes(y = sat, x = salary, color = cut(expend, 3))) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm")
```
- It seems that lower `salary` and `expend` leads to higher `sat` scores.

# Exercise 5
Part a:
```{r}
# Univariate viz of fracCat
ggplot(education, aes(x = fracCat)) +
  geom_bar()
```
Part b:
```{r}
# Bivariate viz of sat and fracCat
ggplot(education, aes(x = fracCat, y = sat)) +
  geom_boxplot()
```
- The more people take the SAT in a state, the lower the average score. This might be because if the general trend is to not take the SAT, those who do tend to have higher goals and standards.

Part c:
```{r}
# Trivariate visualization of sat relating to expend AND fracCat. 
# Highlight the differences in fracCat groups through color AND unique trend lines.
ggplot(education, aes(y = sat, x = expend, color = fracCat)) +
  geom_point() +
  geom_smooth(method = "lm")
```
- It seems that within each `fracCat` group, higher `expend` leads to higher `sat` scores.

Part d:

- In states with lower `salary` and `expend`, `fracCat` is also lower—fewer students choose to take the SAT.
- Because of this, those that do tend to score higher because they're more likely to have higher academic goals.
- This wasn't apparent when looking at the data as a whole, but when each `fracCat` group is isolated, it becomes clear that expenditure does lead to higher SAT scores.

# Exercise 6: 
```{r}
# From here, the code is commented out because it causes problems for rendering "margin too large"

# Remove the "State" column and use it to label the rows
# Then scale the variables
# plot_data <- education |> 
#  column_to_rownames("State") |> 
#  data.matrix() |> 
#  scale()

# Load the gplots package needed for heatmaps
# library(gplots)

# Construct heatmap 1
# heatmap.2(plot_data,
#  dendrogram = "none",
#  Rowv = NA, 
#  scale = "column",
#  keysize = 0.7, 
#  density.info = "none",
#  col = hcl.colors(256), 
#  margins = c(10, 20),
#  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
#  sepcolor = "white", trace = "none"
# )
```
```{r}
# Construct heatmap 2
# heatmap.2(plot_data,
#  dendrogram = "none",
#  Rowv = TRUE,             ### WE CHANGED THIS FROM NA TO TRUE
#  scale = "column",
#  keysize = 0.7, 
#  density.info = "none",
#  col = hcl.colors(256), 
#  margins = c(10, 20),
#  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
#  sepcolor = "white", trace = "none"
# )
```
```{r}
# Construct heatmap 3
# heatmap.2(plot_data,
#  dendrogram = "row",       ### WE CHANGED THIS FROM "none" TO "row"
#  Rowv = TRUE,            
#  scale = "column",
#  keysize = 0.7, 
#  density.info = "none",
#  col = hcl.colors(256), 
#  margins = c(10, 20),
#  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
#  sepcolor = "white", trace = "none"
# )
```
# Exercise 7
Part a:
```{r}
# stars(plot_data,
#  flip.labels = FALSE,
#  key.loc = c(10, 1.5),
#  cex = 1, 
#  draw.segments = TRUE
# )
```
Part b:
```{r}
# stars(plot_data,
#  flip.labels = FALSE,
#  locations = data.matrix(as.data.frame(state.center)),  # added external data to arrange by geo location
#  key.loc = c(-110, 28),
#  cex = 1, 
#  draw.segments = TRUE
# )
```


